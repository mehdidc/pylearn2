!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.insects.Insects {
        which_set: 'train',
        start : 0,
        stop : 18000,
        center : true,
        rescale : true
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 100,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [64, 64],
            num_channels: 3
        },
        layers: [ !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h2',
                     output_channels: 64,
                     irange: .001,
                     kernel_shape: [7, 7],
                     pool_shape: [2, 2],
                     pool_stride: [1, 1],
                    # max_kernel_norm: 1.9365
                 }, 
                 !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h3',
                     output_channels: 128,
                     irange: .001,
                     kernel_shape: [7, 7],
                     pool_shape: [2, 2],
                     pool_stride: [1, 1],
                     #max_kernel_norm: 1.9365
                 }, 

                 !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h4',
                     dim: 1000,
                     sparse_init: 0.01,
                 },

                 !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h5',
                     dim: 1000,
                     irange: 0.01,
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     #max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 18,
                     istdev: .05
                 }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: 0.1,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5
        },
        monitoring_dataset:
            {
                'train': *train,
                'valid' : !obj:pylearn2.datasets.insects.Insects {
                              which_set: 'train',
                              start: 18000,
                              stop:  20000,
                              center: true,
                              rescale: True
                          },
                'test'  : !obj:pylearn2.datasets.insects.Insects {
                              which_set: 'test',
                              center: true,
                              rescale: true
                          }
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X'
            }, 
            #!obj:pylearn2.costs.mlp.WeightDecay {
            #    coeffs: [ .00005, .00005, .00005 ]
            #}
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0.0001,
                    N: 10
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 10
                },
            ]
        },
    },
    extensions:
        [ !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "best_insects.pkl"
        }, 
        #!obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
        #    start: 1,
        #    saturate: 10,
        #    final_momentum: .99
        #}
    ]
}


